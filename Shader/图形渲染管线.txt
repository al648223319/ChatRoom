渲染管线一般分为三个大层（应用阶段 几何阶段 光栅化）
应用阶段是在cpu 操作 后两者在GPU
一、应用阶段
在这个阶段中，一般分为三个主要任务
1.准备好场景数据（例如摄像机的位置，视椎体、场景中有哪些模型 光源等）
2.粗粒度剔除（将不可见的物体剔除出去，不再交给几何阶段处理）
3.设置好每个模型的渲染状态
a.什么是喧嚷状态
渲染状态指的是给模型指定什么着色器，材质球，纹理、shader等

ps：
应用层任何完成后就会将几何数据（渲染图元）提交几何阶段

二、几何阶段
几何阶段主要负责顶点坐标变化，光照、裁剪、投影以及屏幕映射

1.将模型的顶点数据进行变化
模型空间->世界空间->观察空间->屏幕空间

2.图元装配
几何阶段送往光栅化是一堆三角行面片，所以几何阶段需要对顶点进行图元装配

什么是图元装配
根据顶点原始的连接关系，还原出模型的网格结构，网格结构由顶点和索引组成，通过索引将顶点连接一起。组成线、面单元，然后对超出视口外的三角形进行裁剪
如果有一个三角形其中一个顶点位于画面外，另外两个顶点位于画面内，将会得到一个四边行，四边形又将有两个三角形组成。

三、光栅化
光栅化阶段是将一堆三角行单元转化为片段，并对片段进行着色，片段机型裁剪测试，alpha测试、模板测试、深度测试、融合等处理，最终和帧缓冲进行混合。
大阶段：三角形遍历，啄片元操作


3.1 背面剔除

对于实时交互的图形应用程序而言,图形渲染速度和效率是非常重要的。渲染的时候应该尽量减少不必要的操作。剔除是一种通过避免渲染背对观察者的几何体面来提高性能的优化措施。所有几何体都包含正面和反面。剔除基于大多数对象都是封闭的事实；如果你有一个立方体，你不会看到背离你的那一面（总是只有一面在你的前方），因此我们不需要绘制出背面。因此也被称做背面剔除。

3.2 alpha测试

纹理的颜色中含有alpha分量，alpha分量主要用于指定像素的透明度。假定我们为每个像素的alpha分量保留了8位，则该alpha分量的合法区间是[0,255]，其中，[0,255]对应透明度[0%,100%]。当像素的alpha值为0时，该像素是完全透明的。如果像素的alpha值为128，其透明度就是50%，而alpha值为255则表示完全不透明。

alpha测试指的是将一个像素点的alpha值和一个固定值比较。如果比较的结果失败，像素将不会被写到显示输出中。

3.3 模板测试

在说明模板测试之前，我们需要先介绍一下模板缓存。

模板缓存与深度测试缓存、颜色缓存（或后台缓存，最终显示在屏幕上的缓冲区）的大小（分辨率）完全一致，模板缓存中的像素点与颜色缓存的像素点是一 一对应的。模板缓存允许我们动态地、有针对性地决定是否将某个像素写入颜色缓存中。模板缓存用与获得某种特效，如镜面效果或阴影效果。在实现镜面效果时，我们在“镜子”这块区域中绘制某个特定物体的映像，而使用模板缓存来阻止物体映像在“非镜子”的区域中进行绘制。

为了进行这种阻止，就需要使用模板测试。判断是否将某个像素写入颜色缓存的决策过程，称为模板测试。

3.4 深度测试

当两个物体有前后位置关系时，位于前面的物体会将后面的物体部分或全部遮挡。这时为了优化考虑，GPU不应该绘制被遮挡的片段，这种行为称为遮挡剔除。为了更好了解遮挡剔除与深度测试，我们先来看看深度缓存。深度缓存是一个只含有特定像素的深度信息而不含图像数据的表面。深度缓存为最终绘制图像中的每一个像素都保留了一个深度项。所以，当所绘制的图形的分辨率为640*480时，深度缓存中将有640*480个深度项。深度缓存用于计算每个像素的深度值并进行深度测试，深度测试的基本内容是依据深度值让处于同一位置的不同像素进行竞争，以选出该写入该位置的像素，距离摄像机最近的像素获胜，并被写入深入缓存的对应位置上。这样做是合理的，因为距离摄像机最近的像素一定会将位于其后方的像素遮挡。

3.5 alpha融合

融合技术能使我们将当前要进行的光栅化的像素的颜色与先前已经光栅化并处于同一位置的像素的颜色进行合成，即将正在处理的图元颜色值与存储中后台缓存中的像素颜色值进行合成。利用该技术，我们可以获得各种各样的效果，尤其是透明效果。不过值得注意的是，为了中场景中绘制透明物体，通常需要对物体按照由后到前的顺序进行混合处理，如果按照任意顺序进行处理将会产生严重的失真。所以在blending（混色）操作之前要来一次Depth test（见下图）。

3.6 抖动处理

在低位深度的图象中，由于颜色总数的限制，有些颜色无法显示出来，为了模拟出那些颜色以提高显示效果，广泛采用了一种称作抖动处理（dithering）的方法，也称半色调处理（Halftoning）。它是指用交替的点图案去模拟在图象中不能使用的颜色的过程。单色图象是最简单的格式，一般由黑色和白色组成，在一些单色图象如黑白照片和有深浅的图案中，会使用各种灰度，这种图象常被称为灰度图象(Grayscale Image)。由于人眼会把一个很细致的黑白相间的图案解释成灰色，所以灰度图象也可使用单色文件格式，数据仍然可以是黑和白。使用黑色或某一种单色的点获得连续的该色灰度的过程就是抖动处理。抖动处理被更多的用在那些低位数彩色图象文件中，与不采用这种处理相比，它具有更好的显示效果。

经历了这阶段之后，像素的颜色值被写入帧缓存中。


ps：屏幕中的图像都是用帧缓冲的数据组成